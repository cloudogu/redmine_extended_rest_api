openapi: "3.0.0"
info:
  title: Redmine extended API overview
  version: 1.0.0
servers:
  - url: http://localhost:3000/extended_api
    description: local development instance
  - url: https://192.168.56.2/redmine/extended_api
    description: local development instance inside a CES
  - url: https://192.168.56.2/easyredmine/extended_api
    description: local development instance inside a CES
paths:
  /v1/enumerations/enumtypes:
    get:
      summary: Lists all available enumeration types
      tags:
        - enumerations
      responses:
        200:
          description: list of available enumeration types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringArray"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
  /v1/enumerations/{type}/customfields:
    get:
      summary: Lists the custom field information for a specified enumeration type
      tags:
        - enumerations
      responses:
        200:
          description: list of custom field information for the specified enumeration type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnumCustomFields"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      parameters:
        - in: path
          name: type
          schema:
            type: string
          example: DocumentCategory
          required: true
          description: name of the enumeration type
  /v1/enumerations:
    get:
      summary: Lists all available enumerations
      tags:
        - enumerations
      responses:
        200:
          description: mkay
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enumerations"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      parameters:
        - in: query
          name: type
          schema:
            type: string
          example: DocumentCategory
          required: false
          description: name of the enumeration type
    post:
      summary: Creates a new enumeration
      tags:
        - enumerations
      responses:
        200:
          description: the created enumeration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enumeration"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnumPostBody"
    patch:
      summary: Updates an existing enumeration
      tags:
        - enumerations
      responses:
        200:
          description: the updated enumeration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enumeration"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnumPatchBody"
    delete:
      summary: Deletes an existing enumeration
      tags:
        - enumerations
      responses:
        200:
          description: the deleted enumeration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Enumeration"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
  /v1/custom_fields/fieldtypes:
    get:
      summary: Lists all available field types
      tags:
        - custom fields
      responses:
        200:
          description: all available field types
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringArray"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
  /v1/custom_fields/fieldformats:
    get:
      summary: Lists all available field value formats
      tags:
        - custom fields
      responses:
        200:
          description: all available field value formats
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringArray"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
  /v1/custom_fields:
    get:
      summary: Lists all available custom fields
      tags:
        - custom fields
      responses:
        200:
          description: list of custom fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomFields"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
      parameters:
        - in: query
          name: type
          schema:
            type: string
          example: IssueCustomField
          required: false
          description: name of the enumeration type
    patch:
      summary: Updates an existing custom field
      tags:
        - custom fields
      responses:
        200:
          description: the updated custom field
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomFieldsModel"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomFieldsPatch"
    post:
      summary: Creates a new custom field
      tags:
        - custom fields
      responses:
        201:
          description: the created custom field
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomFieldsModel"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomFieldsPost"
            examples:
              minimal:
                $ref: "#/components/examples/customFieldsMinimal"
              list:
                $ref: "#/components/examples/customFieldsList"
              full:
                $ref: "#/components/examples/customFieldsFull"
        required: true
    delete:
      summary: Deletes an existing custom field
      tags:
        - custom fields
      responses:
        200:
          description: the deleted custom field
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomFieldsModel"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
  /v1/issue_statuses:
    get:
      summary: Lists all available issue statuses
      tags:
        - issue statuses
      responses:
        200:
          description: all available issue statuses will be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueStatuses"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: Adds a new issue status
      tags:
        - issue statuses
      responses:
        201:
          description: issue status was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueStatus"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueStatus"
            example:
                {
                  "name": "One-X",
                  "is_closed": true
                }
    patch:
      summary: Updates an existing issue status
      tags:
        - issue statuses
      responses:
        200:
          description: returns the updated issue status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueStatus"
              example:
                {
                  "id": 1,
                  "name": "Two-X",
                  "is_closed": false
                }
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IssueStatus"
    delete:
      summary: Deletes an issue status
      tags:
        - issue statuses
      responses:
        200:
          description: returns the deleted issue status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IssueStatus"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteBody"
  /v1/roles:
    get:
      summary: Lists all available roles
      tags:
        - roles
      responses:
        200:
          description: all available roles will be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: Adds a new role
      tags:
        - roles
      responses:
        201:
          description: role was successfully created
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleBody"
  /v1/roles/{id}:
    patch:
      summary: Updates an existing role
      tags:
        - roles
      responses:
        200:
          description: returns the updated role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleBody"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          example: 12
          required: false
          description: id of the role
    delete:
      summary: Deletes an existing role
      tags:
        - roles
      responses:
        200:
          description: returns the deleted role
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          example: 12
          required: false
          description: id of the role
  /v1/roles/{id}/permissions:
    get:
      summary: Lists all available permissions assignable to the given role
      tags:
        - roles
      responses:
        200:
          description: all available permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StringArray"
              example:
                [
                  "add_project",
                  "edit_project",
                  "close_project"
                ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          example: 12
          required: false
          description: id of the role
  /v1/settings:
    get:
      summary: List all available settings
      tags:
        - settings
      responses:
        '200':
          description: all available settings will be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
              examples:
                simple:
                  $ref: "#/components/examples/settingsExample"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
    put:
      summary: Add or update one or more settings
      tags:
        - settings
      responses:
        204:
          description: the sent data is valid and was saved successfully
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingsParam"
  /v1/trackers:
    get:
      summary: List all available trackers
      tags:
        - trackers
      responses:
        200:
          description: all available trackers will be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trackers"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
    post:
      summary: Adds a new tracker
      tags:
        - trackers
      responses:
        201:
          description: issue status was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tracker"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tracker"
            example:
              {
                "name": "new feature tracker"
              }
    patch:
      summary: Updates an existing tracker
      tags:
        - trackers
      responses:
        200:
          description: returns the updated tracker
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tracker"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tracker"
            example:
              {
                "id": 1,
                 "name": "tracker to update"
              }
    delete:
      summary: Deletes a tracker
      tags:
        - trackers
      responses:
        200:
          description: returns the deleted tracker
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tracker"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteBody"
  /v1/workflows:
    get:
      summary: List all available workflow transitions
      tags:
        - workflows
      responses:
        200:
          description: all available workflow transitions will be returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowTransitions"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
    patch:
      summary: Updates the given status transitions
      tags:
        - workflows
      responses:
        204:
          description: update was successful
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/UnauthorizedAccess"
        403:
          $ref: "#/components/responses/Forbidden"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transitions"
            examples:
              single:
                $ref: "#/components/examples/transitionSinglePatch"
              multiple:
                $ref: "#/components/examples/transitionMultiplePatch"
components:
  examples:
    settingsExample:
      value:
        [
          {
            "id": 1,
            "name": "app_title",
            "value": "MegaMine",
            "updated_on": "2021-01-26T17:21:45.517Z"
          },
          {
            "id": 2,
            "name": "rest_api_enabled",
            "value": "1",
            "updated_on": "2021-01-22T13:03:42.479Z"
          },
          {
            "id": 3,
            "name": "protocol",
            "value": "https",
            "updated_on": "2021-01-11T13:03:42.498Z"
          },
        ]
    customFieldsMinimal:
      value:
        {
          "type": "IssueCustomField",
          "name": "Super Points X3",
          "field_format": "int",
          "role_ids": [ "1" ]
        }
    customFieldsFull:
      value:
        {
          "type": "IssueCustomField",
          "name": "TextField",
          "field_format": "string",
          "description": "This is a text field.",
          "min_length": "2",
          "max_length": "12",
          "regexp": "^[A-Z0-9]+$",
          "text_formatting": "",
          "default_value": "AB",
          "url_pattern": "https://google.com?q=%value%",
          "is_required": "1",
          "is_filter": "1",
          "searchable": "1",
          "visible": "0",
          "role_ids": [ "1", "2", "3", "" ],
          "tracker_ids": [ "1", "2", "3", "" ],
          "is_for_all": "1"
        }
    customFieldsList:
      value:
        {
          "type": "IssueCustomField",
          "name": "ListField",
          "field_format": "list",
          "edit_tag_style": "check_box",
          "description": "This is a list field.",
          "possible_values": [
              "value 1",
              "value 2",
              "value 3"
          ],
          "role_ids": [ "1" ]
        }
    transitionSinglePatch:
      value:
        {
          "role_id": [ "1" ],
          "tracker_id": [ "1" ],
          "transitions": {
            "123": {
              "1": { "always": "1" }
            }
          }
        }
    transitionMultiplePatch:
      value:
        {
          "role_id": [ "4" ],
          "tracker_id": [ "23", "24" ],
          "transitions": {
            "12": {
              "1": { "always": "1", "author": "1", "assignee": "0" }
            },
            "123": {
              "12": { "always": "1", "author": "0", "assignee": "1" }
            }
          }
        }
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    CustomFieldsBaseModel:
      type: object
      properties:
        name:
          type: string
        field_format:
          type: string
          enum: [ 'string', 'text', 'link', 'int', 'float', 'date', 'list', 'bool', 'enumeration', 'user', 'version', 'attachment' ]
        regexp:
          type: string
        possible_values:
          type: array
          items:
            type: string
        description:
          type: string
        min_length:
          type: integer
        max_length:
          type: integer
        is_required:
          type: boolean
        searchable:
          type: boolean
        default_value:
          type: string
        is_for_all:
          type: boolean
        is_filter:
          type: boolean
        visible:
          type: boolean
    CustomFieldsPost:
      allOf:
        - type: object
          properties:
            name:
              type: string
              required: true
            type:
              type: string
              description: target type of the custom field (e.g. IssueCustomField)
              required: true
            field_format:
              type: string
              required: true
            role_ids:
              type: array
              required: true
              items:
                type: string
            edit_tag_style:
              type: string
            url_pattern:
              type: string
            tracker_ids:
              type: array
              items:
                type: string
        - $ref: "#/components/schemas/CustomFieldsBaseModel"
    CustomFieldsPatch:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              required: true
            edit_tag_style:
              type: string
            url_pattern:
              type: string
        - $ref: "#/components/schemas/CustomFieldsBaseModel"
    CustomFields:
      type: array
      items:
        $ref: "#/components/schemas/CustomFieldsModel"
    CustomFieldsModel:
      allOf:
        - $ref: "#/components/schemas/CustomFieldsBaseModel"
        - type: object
          properties:
            id:
              type: integer
            possible_values:
              type: array
              items:
                type: string
            editable:
              type: boolean
            multiple:
              type: boolean
            format_store:
              type: object
              properties:
                edit_tag_style:
                  type: string
                url_pattern:
                  type: string
    Enumerations:
      type: array
      items:
        $ref: "#/components/schemas/Enumeration"
    Enumeration:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        position:
          type: integer
        is_default:
          type: boolean
        active:
          type: boolean
        project_id:
          type: integer
        parent_id:
          type: integer
        position_name:
          type: string
    EnumCustomFields:
      type: array
      items:
        $ref: "#/components/schemas/EnumCustomField"
    EnumCustomField:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        format:
          type: string
    EnumBody:
      type: object
      properties:
        is_default:
          type: boolean
          default: false
        active:
          type: boolean
          default: true
        project_id:
          type: integer
          default: null
        parent_id:
          type: integer
          default: null
        position_name:
          type: string
          default: null
        custom_field_values:
          required: false
          type: object
          additionalProperties:
            type: string
    EnumPostBody:
      allOf:
        - type: object
          properties:
            name:
              type: string
              required: true
            type:
              type: string
              required: true
        - $ref: "#/components/schemas/EnumBody"
      example:
        {
          "type": "IssuePriority",
          "name": "Example Name",
          "custom_field_values": {
            "20": "content for custom field with id 20"
          }
        }
    EnumPatchBody:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              required: true
            name:
              type: string
              required: false
        - $ref: "#/components/schemas/EnumBody"
      example:
        {
          "id": "15",
          "name": "Example Name",
          "custom_field_values": {
            "20": "content for custom field with id 20"
          }
        }
    StringArray:
      type: array
      items:
        type: string
    Trackers:
      type: array
      items:
        $ref: "#/components/schemas/Tracker"
    Tracker:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        position:
          type: integer
        is_in_roadmap:
          type: boolean
        default_status_id:
          type: integer
        description:
          type: string
        is_in_chlog:
          type: boolean
        fields_bits:
          type: integer
    IssueStatuses:
      type: array
      items:
        $ref: "#/components/schemas/IssueStatus"
    IssueStatus:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        is_closed:
          type: boolean
        position:
          type: integer
        default_done_ratio:
          type: object
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        position:
          type: integer
        assignable:
          type: boolean
        builtin:
          type: integer
        permissions:
          $ref: "#/components/schemas/StringArray"
        issues_visibility:
          type: string
        users_visibility:
          type: string
        time_entries_visibility:
          type: string
        all_roles_managed:
          type: boolean
        settings:
          type: object
    Roles:
      type: array
      items:
        $ref: "#/components/schemas/Role"
    RoleBody:
      allOf:
        - type: object
          properties:
            name:
              type: string
              required: true
            managed_role_ids:
              $ref: "#/components/schemas/StringArray"
            permissions_all_trackers:
              type: object
              properties:
                view_issues:
                  type: string
                add_issues:
                  type: string
                edit_issues:
                  type: string
                add_issue_notes:
                  type: string
                delete_issues:
                  type: string
            permissions_tracker_ids:
              type: object
              properties:
                view_issues:
                  $ref: "#/components/schemas/StringArray"
                add_issues:
                  $ref: "#/components/schemas/StringArray"
                edit_issues:
                  $ref: "#/components/schemas/StringArray"
                add_issue_notes:
                  $ref: "#/components/schemas/StringArray"
                delete_issues:
                  $ref: "#/components/schemas/StringArray"
            copy_workflow_from:
              type: string
        - $ref: "#/components/schemas/Role"
    SettingsParam:
      type: object
      properties:
        settings:
          description: all settings can be passed as simple key value pair inside the settings object
          minProperties: 1
          type: object
          additionalProperties:
            type: string
      example:
        app_title: Megamine
        rest_api_enabled: "1"
    Settings:
      type: array
      items:
        $ref: "#/components/schemas/Setting"
    Setting:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        value:
          type: string
        updated_on:
          type: string
    WorkflowTransitions:
      type: array
      items:
        $ref: "#/components/schemas/WorkflowTransition"
      example:
        [
          {
            "id": 11,
            "tracker_id": 1,
            "old_status_id": 3,
            "new_status_id": 1,
            "role_id": 1,
            "assignee": false,
            "author": false,
            "field_name": null,
            "rule": null
          },
          {
            "id": 12,
            "tracker_id": 1,
            "old_status_id": 3,
            "new_status_id": 2,
            "role_id": 1,
            "assignee": false,
            "author": false,
            "field_name": null,
            "rule": null
          }
        ]
    WorkflowTransition:
      type: object
      properties:
        id:
          type: integer
        tracker_id:
          type: integer
        old_status_id:
          type: integer
        role_id:
          type: integer
        assignee:
          type: string
        author:
          type: string
        field_name:
          type: string
        rule:
          type: string
      example:
        id: 11,
        tracker_id: 1
        old_status_id: 3
        new_status_id: 1
        role_id: 1
        assignee: false
        author: false
        field_name: null
        rule: null
    Transitions:
      type: object
      properties:
        role_id:
          type: array
          items:
            type: integer
        tracker_id:
          type: array
          items:
            type: integer
        transitions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/Transition"
    Transition:
      type: object
      properties:
        always:
          type: string
          enum: [ "0", "1" ]
        author:
          type: string
          enum: [ "0", "1" ]
        assignee:
          type: string
          enum: [ "0", "1" ]
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
      example:
        {
          "errors": ["failed to save data", "item not found"]
        }
    DeleteBody:
      type: object
      properties:
        id:
          type: string
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    UnauthorizedAccess:
      description: Unauthorized access
    Forbidden:
      description: Forbidden - the API is not enabled or the user has insufficient privileges to execute this action.
    NotFound:
      description: Not found
security:
  - basicAuth: []
